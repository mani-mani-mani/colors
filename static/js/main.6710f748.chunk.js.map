{"version":3,"sources":["Utils/NumberUtil.js","Utils/ColorUtil.js","Components/ColorInput.js","Components/ColorCircle.js","App.js","serviceWorker.js","index.js"],"names":["toHex","value","toString","rgb","colorValue","redHex","String","R","padStart","greenHex","G","blueHex","B","r","g","b","ColorInput","backgroundColor","name","style","color","this","props","onChange","handleChange","Component","ColorCircle","canvas","createRef","updateCanvas","ctx","current","getContext","fillStyle","beginPath","arc","Math","PI","stroke","fill","ref","width","height","App","event","state","parseInt","target","isNaN","setState","display","alignItems","innerHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6710f748.chunk.js","sourcesContent":["export const toHex = (value) => {\n  return value.toString(16);\n}\n","import { toHex } from \"./NumberUtil\";\n\nexport const rgb = (colorValue) => {\n  const redHex = String(toHex(colorValue.R)).padStart(2, '0');\n  const greenHex = String(toHex(colorValue.G)).padStart(2, '0');\n  const blueHex = String(toHex(colorValue.B)).padStart(2, '0');\n\n  return \"#\"\n    + String(redHex)\n    + String(greenHex)\n    + String(blueHex);\n}\n\nexport const r = (colorValue) => {\n  return rgb({R: colorValue.R, G: 0, B: 0})\n}\nexport const g = (colorValue) => {\n  return rgb({R: 0, G: colorValue.G, B: 0})\n}\nexport const b = (colorValue) => {\n  return rgb({R: 0, G: 0, B: colorValue.B})\n}\n\n\n// 補色の計算\nexport const complementaryRgb = (colorValue) => {\n  const max_color = Math.max(colorValue.R, colorValue.G, colorValue.B);\n  const min_color = Math.min(colorValue.R, colorValue.G, colorValue.B);\n\n  const c_red = (max_color + min_color) - colorValue.R;\n  const c_green = (max_color + min_color) - colorValue.G;\n  const c_blue = (max_color + min_color) - colorValue.B;\n\n  const redHex = String(toHex(c_red)).padStart(2, '0');\n  const greenHex = String(toHex(c_green)).padStart(2, '0');\n  const blueHex = String(toHex(c_blue)).padStart(2, '0');\n\n  return \"#\"\n    + String(redHex)\n    + String(greenHex)\n    + String(blueHex);\n}\n\n","import React, { Component } from 'react';\nimport { b, g, r } from '../Utils/ColorUtil';\n\nexport default class ColorInput extends Component {\n  backgroundColor = (name, colorValue) => {\n    switch (name) {\n      case 'R':\n        return r(colorValue)\n      case 'G':\n        return g(colorValue)\n      case 'B':\n        return b(colorValue)\n      default:\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <span style={{ color: 'white', backgroundColor: this.backgroundColor(this.props.name, this.props.value) }}>\n          {this.props.name}\n        </span>\n        <input name={this.props.name} value={this.props.value[this.props.name]} onChange={this.props.handleChange} />\n      </div >\n    )\n  }\n}","import React, { Component, createRef } from 'react';\nimport { rgb } from '../Utils/ColorUtil';\n\nexport default class ColorCircle extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = createRef();\n  }\n  componentDidMount() {\n    this.updateCanvas();\n  }\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    let ctx = this.canvas.current.getContext(\"2d\");\n    if (this.props.colorValue) {\n      ctx.fillStyle = rgb(this.props.colorValue);\n    }\n\n    //円\n    ctx.beginPath();\n    ctx.arc(100, 100, 40, 0, Math.PI * 2, false);\n    ctx.stroke();\n    ctx.fill();\n  }\n\n  render() {\n    return (\n      <canvas\n        ref={this.canvas}\n        width=\"200px\"\n        height=\"200px\"\n      />\n    )\n  }\n}","import React, { Component } from 'react';\nimport ColorInput from './Components/ColorInput';\nimport ColorCircle from './Components/ColorCircle';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorValue: { R: 255, G: 255, B: 255 }\n    };\n  }\n  handleChange = (event) => {\n    let colorValue = this.state.colorValue\n    let value= parseInt(event.target.value)\n    if (isNaN(value)) {\n      value = 0\n    }\n    colorValue[event.target.name] = value\n    this.setState({ colorValue: colorValue })\n  }\n\n  render() {\n    return (\n      <div style={{display: 'flex', alignItems: 'center'}}>\n        <ColorCircle style={{width: '50%', innerHeight: 200}} colorValue={this.state.colorValue} />\n        <div style={{width: '50%'}}>\n          <ColorInput name={'R'} value={this.state.colorValue} handleChange={this.handleChange} />\n          <ColorInput name={'G'} value={this.state.colorValue} handleChange={this.handleChange} />\n          <ColorInput name={'B'} value={this.state.colorValue} handleChange={this.handleChange} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}